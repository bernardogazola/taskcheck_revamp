generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  COORDENADOR
  PROFESSOR
  ALUNO
}

enum StatusRelatorio {
  AGUARDANDO_VALIDACAO
  INVALIDO
  VALIDO
  RECATEGORIZACAO
}

// Modelos para better-auth
model User {
  id            Int    @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(ALUNO)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?

  accounts      Account[]
  sessions      Session[]

  // Relacionamentos com os modelos de papel
  aluno         Aluno?
  professor     Professor?
  coordenador   Coordenador?

  @@map("users")
}

model Account {
  id                 Int   @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int   @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Modelos de aplicação
model Curso {
  id         Int      @id @default(autoincrement())
  nome       String   @db.VarChar(100)
  
  alunos        Aluno[]
  categorias    Categoria[]
  coordenador   Coordenador[]
  professorCurso ProfessorCurso[]

  @@map("curso")
}

model Aluno {
  id_usuario  Int    @id
  matricula   Int
  id_curso    Int
  
  usuario     User      @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  curso       Curso     @relation(fields: [id_curso], references: [id])
  relatorios  RelatorioAtividade[]

  @@map("aluno")
}

model Professor {
  id_usuario  Int    @id
  
  usuario     User      @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  feedbacks   Feedback[]
  professorCurso ProfessorCurso[]
  reversaoValidacao ReversaoValidacao[]
  feedbackHistorico FeedbackHistorico[]

  @@map("professor")
}

model Coordenador {
  id_usuario            Int    @id
  id_curso_responsavel  Int
  
  usuario     User      @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  curso       Curso     @relation(fields: [id_curso_responsavel], references: [id])

  @@map("coordenador")
}

model Categoria {
  id              Int      @id @default(autoincrement())
  nome            String   @db.VarChar(100)
  descricao       String   @db.Text
  carga_horaria   Int
  id_curso        Int
  
  curso           Curso    @relation(fields: [id_curso], references: [id])
  relatorios      RelatorioAtividade[]

  @@map("categoria")
}

model RelatorioAtividade {
  id                Int                 @id @default(autoincrement())
  nome              String              @db.VarChar(100)
  texto_reflexao    String              @db.Text
  data_realizacao   DateTime            @db.Date
  data_envio        DateTime            @db.Date
  status            StatusRelatorio     @default(AGUARDANDO_VALIDACAO)
  horas_validadas   Int
  certificado       Bytes
  id_aluno          Int
  id_categoria      Int
  
  aluno             Aluno               @relation(fields: [id_aluno], references: [id_usuario])
  categoria         Categoria           @relation(fields: [id_categoria], references: [id])
  feedbacks         Feedback[]
  historico         HistoricoRelatorioAtividade[]
  reversaoValidacao ReversaoValidacao[]
  feedbackHistorico FeedbackHistorico[]

  @@map("relatorio_atividade")
}

model Feedback {
  id               Int      @id @default(autoincrement())
  texto_feedback   String   @db.Text
  data_envio       DateTime @db.Date
  id_professor     Int
  id_relatorio     Int
  
  professor        Professor @relation(fields: [id_professor], references: [id_usuario])
  relatorio        RelatorioAtividade @relation(fields: [id_relatorio], references: [id])
  feedbackHistorico FeedbackHistorico[]

  @@map("feedback")
}

model FeedbackHistorico {
  id             Int           @id @default(autoincrement())
  id_feedback    Int?
  id_relatorio   Int
  texto_feedback String        @db.Text
  data_envio     DateTime      @default(now())
  id_professor   Int?
  versao         Int?
  
  feedback       Feedback?     @relation(fields: [id_feedback], references: [id])
  relatorio      RelatorioAtividade @relation(fields: [id_relatorio], references: [id])
  professor      Professor?    @relation(fields: [id_professor], references: [id_usuario])

  @@map("feedback_historico")
}

model HistoricoRelatorioAtividade {
  id                       Int            @id @default(autoincrement())
  id_relatorio             Int
  nome_anterior            String?        @db.VarChar(100)
  texto_reflexao_anterior  String?        @db.Text
  data_realizacao_anterior DateTime?      @db.Date
  status_anterior          StatusRelatorio?
  data_alteracao           DateTime       @default(now())
  certificado_anterior     Bytes?
  
  relatorio                RelatorioAtividade @relation(fields: [id_relatorio], references: [id], onDelete: Cascade)

  @@map("historico_relatorio_atividade")
}

model ProfessorCurso {
  id_professor Int
  id_curso     Int
  
  professor    Professor @relation(fields: [id_professor], references: [id_usuario], onDelete: Cascade)
  curso        Curso    @relation(fields: [id_curso], references: [id], onDelete: Cascade)

  @@id([id_professor, id_curso])
  @@map("professor_curso")
}

model ReversaoValidacao {
  id             Int      @id @default(autoincrement())
  id_relatorio   Int
  justificativa  String   @db.Text
  data_reversao  DateTime @default(now())
  id_professor   Int
  
  relatorio      RelatorioAtividade @relation(fields: [id_relatorio], references: [id])
  professor      Professor @relation(fields: [id_professor], references: [id_usuario])

  @@map("reversao_validacao")
}